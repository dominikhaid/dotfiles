{"mappings":"4nBAAAA,EAAA,SAAAC,SAAsCC,KAAKC,MAAK,yzBCMhDC,EAJqBC,QAAQC,EAAKC,EAAAC,QAAA,uBAC1BD,EAAAE,aAAA,CAACC,MAAK,CAAGC,SAAU,IAAQL,qUCHnCM,EAA0B,mBAC1BC,EAAiC,0BACjCC,EAA+B,wBAC/BC,EAAmC,kCC+DnCC,EAzDcX,QAAKY,EAAOZ,EAAPY,QAASC,EAAKb,EAALa,MAAOC,EAASd,EAATc,UAAWC,EAAQf,EAARe,SAAad,EAAKC,EAAAc,wBAAAhB,EAAA,CAAA,UAAtC,QAAO,YAAW,iBAEnCiB,EAAiBC,EAAAC,WAAWC,EAAAC,mBAA5BJ,cACDK,EAAQC,OAAOC,SAASC,gBAAgBH,MACxCI,EAA0B,aAAZd,EAAQe,KAEtBC,EAAgB1B,EAAA2B,kBAAA,gBACZC,QAAab,UACXa,EAAKF,iBAAiBN,EAAOV,EAAQmB,OAG3CC,EAAoB9B,EAAA2B,kBAAA,gBAChBC,QAAab,UACXa,EAAKE,qBAAqBV,uBAa5BpB,EAAAE,aAAA,CACA6B,UAAWC,EAAAC,GAAOC,SAClB/B,MAAK,CACDgC,YAA4B,IAAbxB,EAAQ,GAAO,KAC9ByB,QAAUxB,EAAS,QAAW,QAElCyB,aAAY,IAAQX,IACpBY,aAAY,IAAQR,KAChB/B,GAjBDwC,EAAAC,oBAAoB9B,IAoBH+B,EAAAC,EAAA,MACR,CAACX,UAAWC,EAAAC,GAAOU,cAAeC,QAlBlCC,IAChBA,EAAMC,kBACNjC,EAASH,gBAiBY,CAACqB,UAAWC,EAAAC,GAAOc,qBAKhCvB,GAAWiB,EAAAC,EACNM,EAAAC,QAAiB,CAACC,eAAgBlB,EAAAC,GAAOkB,gBAAiBC,UAAW1C,EAAS2C,aAAa,KAI/F7B,GAAWiB,EAAAC,EACPY,EAAAL,QAAO,CAACC,eAAgBlB,EAAAC,GAAOkB,gBAAiBzC,QAASA,EAAS2C,aAAa,6DC3DpGE,EAA8B,6BCkI9BC,EAzHkB1D,QAAK2D,EAAQ3D,EAAR2D,SAAUC,EAAe5D,EAAf4D,gBAAoB3D,EAAKC,EAAAc,wBAAAhB,EAAA,CAAA,WAA3B,wBAEa6D,EAAY3D,EAAA4D,cAAZ5C,EAAA6C,SAAQ,IAAA,GAA3CC,EAAmCH,EAAY,GAAhCI,EAAoBJ,EAAY,GACtBK,EAAchE,EAAA4D,cAAd5C,EAAA6C,SAAS,MAAI,GAAtCI,EAAyBD,EAAc,GAA7BE,EAAeF,EAAc,GACtCG,EAAanD,EAAAC,WAAWmD,EAAAC,iBAAxBF,SAENnD,EAAAsD,WAAS,SACDC,EAAWd,EAASe,KAAG,CAAGC,EAAIC,MAE1BC,SAAS,EACTC,MAAM,EACNjE,MAAO,MAIf4D,EAASM,SAAO,CAAGC,EAAOJ,QACb,GAALA,EAAM,WAENK,EAAWR,EAASG,EAAE,GACtBM,EAAkBvB,EAASiB,EAAE,GAC7BO,EAAiBxB,EAASiB,GAC1B/D,EAASoE,EAAYA,EAASpE,MAAQ,EAEtCsE,EAAeC,QAAUF,EAAgBE,OAIzCD,EAAeC,QAAUF,GAK7BG,YAAc1B,EAAS2B,WAAYC,GAAMA,GAAKJ,EAAeC,SAC7DJ,EAAMnE,MAAQ4D,EAASY,aAAaxE,MAAQ,GALxCmE,EAAMnE,MAAQA,EAAQ,EAJtBmE,EAAMnE,MAAQoE,EAASpE,SAY3B4D,EAASe,OAAS,IAClBf,EAAS,GAAGI,SAAU,GAG1BZ,EAAiBQ,KAClBd,OAEC8B,EAAW,CAAIC,EAAeC,SAC1BlB,EAAQ,IAAOT,GAEnBL,EAASoB,SAAO,CAAGnE,EAASgE,KACpBhE,EAAQwE,QAAUM,IAClBjB,EAASG,GAAGC,SAAU,MAI9BJ,EAASkB,GAAOb,MAAO,EAEvBb,EAAiBQ,qBAkCbvE,EAAAE,aAAA,CAAC6B,UAAWC,EAAA0D,GAAOC,cAAkB5F,GAEjC+D,EAAcU,KAAG,CAAGM,EAAOJ,KAACjC,OAAAA,EAAAC,EAAAD,EAAAmD,SAAA,SATpBlF,EAYiB+C,EAASiB,MAVzB,cAAbhE,MAAAA,OAAa,EAAbA,EAASe,QAAuBc,EAAAC,oBAAoB9B,KACpC,eAAbA,MAAAA,OAAa,EAAbA,EAASe,QAS2BgB,EAAAC,EAClBjC,EAAQ,CACLC,QAAS+C,EAASiB,GAClB/D,MAAOmE,EAAMnE,MACbC,UAAWkE,EAAMH,sBACHG,EAAMF,KAAI,OAAU,yBACnBnB,EAASiB,GAAG7C,IAAMoC,EACjCpD,SAAQ,IACKiE,EAAMF,KA5CnC,EAAIiB,EAAgBJ,SAC5BlB,EAAQ,IAAOT,GACfgC,EAAI,CAAID,GAEZpC,EAASoB,SAAO,CAAGnE,EAASgE,KACpBoB,EAAKC,SAASrF,EAAQwE,UACtBY,EAAKE,KAAKtF,GACV6D,EAASG,GAAGC,SAAU,EACtBJ,EAASG,GAAGE,MAAO,MAI3BL,EAASkB,GAAOb,MAAO,EAEvBb,EAAiBQ,IA8BsC0B,CAAaxC,EAASiB,GAAIA,GAAKa,EAAY9B,EAASiB,GAAIA,GAEnF9B,QAAO,KA7BtB,CAAIlC,IACbA,EAAQmB,IAAMoC,IAElBC,EAAYxD,EAAQmB,IACpB6B,EAAgBhD,KA0BuBwF,CAAczC,EAASiB,KAAQI,EAAMF,MAAQT,EAAQ,4BAAgCoB,EAAY9B,EAASiB,GAAIA,GAAK,SAvB9I,IAAIhE,KAgCgB,GAAxBoD,EAAcwB,QAAW7C,EAAAC,EACpByD,EAAAlD,QAAO,wJC3H5BmD,EAA0B,yBCA1BC,EAAiB5G,EAAA,SAAA6G,eAAyC7G,EAAA,QAAA,CAA0B,QAAQ,iBCuD5F8G,EA5CczG,QAmBkB6D,EAWAK,EAKZwC,EAnCD9F,EAAOZ,EAAPY,QAAYX,EAAKC,EAAAc,wBAAAhB,EAAA,CAAA,gBAE1B2G,EAAiBzF,EAAAC,WAAWC,EAAAC,mBAA5BsF,aACAtC,EAAanD,EAAAC,WAAWmD,EAAAC,iBAAxBF,0BAGEnE,EAAAE,aAAA,CAAC6B,UAAWC,EAAA0E,GAAOC,UAAc5G,GAAK0C,EAAAC,EACrCkE,EAAA3D,QAAO,CAAC4D,MAAK,yBAA0BhF,GAAE,gBAElC4E,GAAgBtC,EAAQ,wBAAsB1B,EAAAC,EAAAD,EAAAmD,SAAA,KAAAnD,EAAAC,EAAA,MAElC,KAAAD,EAAAC,EACCoE,EAAA7D,QAAG,CAAC8D,IAAK/E,EAAAqE,GAAatE,UAAS,2BAC3B,CAAC5B,MAAK,CAAG6G,WAAU,MAASC,MAAK,0HAMlDvG,IAAgC,QAApBiD,EAAAjD,EAAQwG,oBAAY,IAApBvD,OAA4B,EAA5BA,EAAsB2B,QAAS,GAAC7C,EAAAC,EAAA,KACrC,KAEKhC,EAAQwG,aAAa1C,KAAK2C,GAAK1E,EAAAC,EAAA,KACxB,KAAEyE,MAOrBzG,GAA4C,IAAZ,QAApBsD,EAAAtD,EAAQwG,oBAAY,IAApBlD,OAA4B,EAA5BA,EAAsBsB,SAAW,6BAAgC7C,EAAAC,EAGpFkE,EAAA3D,QAAO,CAAC4D,MAAK,yBAA0BhF,GAAE,qBAElCnB,MAAAA,GAAiB,QAAjB8F,EAAA9F,EAAS0G,gBAAQ,IAAjBZ,OAAiB,EAAjBA,EAAmBlB,QAAS,GAAC7C,EAAAC,EACxB2E,EAAApE,QAAmB,CAACQ,SAAU/C,EAAQ0G,mJC/C/DE,EAAmC,4BACnCC,EAAyB,wBCoCzBC,EA/BmB1H,YAAKiC,UAAAA,OAAS,IAAA0F,EAAA,GAAAA,EAAQ1H,EAAKC,EAAAc,wBAAAhB,EAAA,CAAA,kBACtC4H,EAAc,uBACO,sDACK,uCAGG/D,EAAA3C,EAAAC,WAAWmD,EAAAC,iBAAtCF,EAA2BR,EAA3BQ,SAAUwD,EAAiBhE,EAAjBgE,aAEZC,EAAmB/E,QACfgF,EAAQhF,EAAMiF,OAAOC,QACrBC,EAAcnF,EAAMiF,OAAOG,KAC/B9D,EAAS6D,GAAeH,EACxBF,EAAaxD,qBAITnE,EAAAE,aAAA,CAAC6B,UAAS,GAAKC,EAAAkG,GAAOC,qBAAqBpG,KAAiBhC,GAExDoE,GAAYiE,OAAOC,KAAKlE,GAAUK,KAAKwD,GAAWvF,EAAAC,EAAA,MAC1C,CAACX,UAAWC,EAAAkG,GAAOI,qBACb,KAAA7F,EAAAC,EAAA,QACI,CAACjB,KAAI,WAAYwG,KAAMD,EAAaD,QAAS5D,EAAS6D,GAAcO,SAAUX,IACnFF,EAAeM,SC5B5CQ,EAAiB/I,EAAA,SAAA6G,eAAyC7G,EAAA,QAAA,CAA0B,QAAQ,eCA5FgJ,EAAiBhJ,EAAA,SAAA6G,eAAyC7G,EAAA,QAAA,CAA0B,QAAQ,+OCA5FiJ,EAA2B,oBAC3BC,EAA2B,oBAC3BC,EAA2B,oBAC3BC,EAA+B,wBAC/BC,EAA+B,wBAC/BC,EAAwB,qBCuDxBC,EA1CkB,SAERvC,EAAiBzF,EAAAC,WAAWC,EAAAC,mBAA5BsF,aACAtC,EAAanD,EAAAC,WAAWmD,EAAAC,iBAAxBF,SAC2CqC,EAAAxF,EAAAC,WAAWgI,EAAAC,aAAvDzF,EAA4C+C,EAA5C/C,SAAU0F,EAAkC3C,EAAlC2C,gBAC6BC,GADK5C,EAAjB6C,cAC0BrJ,EAAA4D,cAAd5C,EAAA6C,SAAS,MAAI,IAApDyF,EAAuCF,EAAc,GAApCG,EAAsBH,EAAc,GACpBI,EAAexJ,EAAA4D,cAAf5C,EAAA6C,UAAS,GAAK,GAA/C4F,EAAiCD,EAAe,GAAlCE,EAAmBF,EAAe,GAEjDG,EAAW3J,EAAA2B,kBAAA,YACX4H,EAAmB,YACbJ,cAOVnI,EAAAsD,UAAStE,EAAA2B,kBAAA,yBACCgI,IAENtI,OAAOC,SAASsI,QAAQC,YAAYC,YAAYX,QAG5C9H,OAAOC,SAASsI,QAAQC,YAAYE,eAAeZ,qBAKnD,CAACtH,GAAIG,EAAAgI,GAAOC,eACXC,EAAAjH,QAAS,CAACpB,GAAIG,EAAAgI,GAAOG,eACjBC,EAAAnH,QAAe,CAACoH,KAAMrI,EAAAwG,GAAa3B,MAAK,kBAAmBjE,QAAO,IAAQ+G,MACzElD,GAAgBtC,EAAQ,wBAAsB1B,EAAAC,EAAO4H,EAAArH,QAAc,CAACoH,KAAMrI,EAAAqE,GAAakE,KAAI,iCAAkCpK,MAAK,CAAG8G,MAAK,iBAC3IpH,EAAe,MAAA4C,EAAAC,EACf0H,EAAAnH,QAAe,CAACoH,KAAMrI,EAAAyG,GAAc5B,MAAK,8BAA+B4C,EAAY,SAAY,GAAO7G,QAAO,KAnBvH8G,GAAiBD,WAqBZjC,EAAa,CAACzF,UAAY0H,EAAY,GAASzH,EAAAgI,GAAOQ,OAAQ3I,GAAIG,EAAAgI,GAAOS,oBACzEjH,EAAY,CAAC3B,GAAIG,EAAAgI,GAAOU,UAAWjH,SAAUA,EAAUC,gBAAkBhD,GAAY6I,EAAmB7I,SACxG6F,EAAQ,CAAC1E,GAAIG,EAAAgI,GAAOW,cAAejK,QAAS4I,oCC/CnDsB,EAAG,KAELC,SAASC,KAAKC,iBAAgB,eAAiBC,GAAMA,EAAEC,uBAGlD/J,EAAA+B,QAAyB,CAACiI,SAAQ,QAASxK,QAAO,gBAC9C0D,EAAAnB,QAAuB,KAAAR,EAAAC,EACnBuG,EAAAhG,QAAmB,KAAAR,EAAAC,EACfsG,EAAY,cAO7BmC,EAAON,SAASO,eAAc,QAClCD,EAAKE,UAAUC,IAAG,SAAYjK,OAAOC,SAASiK,OAAOC,WAErD/I,EAAAgJ,OAAMhJ,EAAAC,EAAEkI,EAAG,MAAKO","sources":["node_modules/@parcel/runtime-js/lib/runtime-0decfc11571ce7645c918d78d55623a3.js","src/scripts/components/OptionBarSpacer/OptionBarSpacer.js","src/scripts/components/TreeItem/TreeItem.scss","src/scripts/components/TreeItem/TreeItem.js","src/scripts/components/ContextsTree/ContextsTree.scss","src/scripts/components/ContextsTree/ContextsTree.js","src/scripts/components/Sidepane/Sidepane.scss","node_modules/@parcel/runtime-js/lib/runtime-cf93aee7d1e646436eac8b65fe44f36f.js","src/scripts/components/Sidepane/Sidepane.js","src/scripts/components/PanelSettings/PanelSettings.scss","src/scripts/components/PanelSettings/PanelSettings.js","node_modules/@parcel/runtime-js/lib/runtime-dae88fcdab512d6e14a3d5e75c08dd39.js","node_modules/@parcel/runtime-js/lib/runtime-8bc034a1a14488f62a97f5739d53aceb.js","src/scripts/components/PanelContent/PanelContent.scss","src/scripts/components/PanelContent/PanelContent.js","src/views/panel/panel.js"],"sourcesContent":["require('./bundle-manifest').register(JSON.parse(\"{\\\"4VUak\\\":\\\"views\\\\\\\\panel\\\\\\\\panel.76998a34.js\\\",\\\"2jKUE\\\":\\\"warning.be523fd3.svg\\\",\\\"4glIY\\\":\\\"refresh.b2f1cf35.svg\\\",\\\"35qsn\\\":\\\"settings.4a78987d.svg\\\",\\\"1ri2j\\\":\\\"views\\\\\\\\elements-sidebar\\\\\\\\sidebar-preact.0426bd8b.css\\\",\\\"1kwj3\\\":\\\"views\\\\\\\\panel\\\\\\\\panel.d6892400.css\\\",\\\"3sgNw\\\":\\\"views\\\\\\\\elements-sidebar\\\\\\\\sidebar-preact.b407c067.js\\\",\\\"1W07Y\\\":\\\"background.86ced2c0.js\\\"}\"));","import { h } from 'preact';\r\n\r\nconst OptionBarSpacer = ({...props}) => (\r\n    <div style={{flexGrow: 1}} {...props}></div>\r\n);\r\n\r\nexport default OptionBarSpacer;","module.exports[\"treeItem\"] = \"_treeItem_cae7cd\";\nmodule.exports[\"treeItemContext\"] = \"_treeItemContext_cae7cd\";\nmodule.exports[\"contextToggle\"] = \"_contextToggle_cae7cd\";\nmodule.exports[\"contextToggleIcon\"] = \"_contextToggleIcon_cae7cd\";","import { h } from 'preact';\r\nimport { useContext } from 'preact/hooks';\r\nimport { ConnectionContext } from '../ConnectionContext';\r\nimport Context from '../Context/Context';\r\nimport ContextsContainer from '../ContextsContainer/ContextsContainer';\r\nimport { isValuableContainer } from '../../utils/utils';\r\n\r\nimport styles from \"./TreeItem.scss\";\r\n\r\nconst TreeItem = ({context, depth, isVisible, onToggle, ...props}) => {\r\n\r\n    let {getConnection} = useContext(ConnectionContext);\r\n    let tabId = chrome.devtools.inspectedWindow.tabId;\r\n    let isContainer = context.type == \"container\";\r\n\r\n    let highlightContext = async () => {\r\n        let conn = await getConnection();\r\n        await conn.highlightContext(tabId, context.id);\r\n    } \r\n\r\n    let undoHighlightContext = async () => {\r\n        let conn = await getConnection();\r\n        await conn.undoHighlightContext(tabId);\r\n    }\r\n\r\n    let shouldShowToggle = () => {\r\n        return isValuableContainer(context);\r\n    }\r\n\r\n    let handleToggle = (event) => {\r\n        event.stopPropagation();\r\n        onToggle(context)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={styles.treeItem}\r\n            style={{\r\n                paddingLeft: ((depth + 1) * 20) + \"px\",\r\n                display: (isVisible) ? 'block' : 'none'\r\n            }}\r\n            onMouseEnter={() => highlightContext()}\r\n            onMouseLeave={() => undoHighlightContext()}\r\n            {...props}\r\n        >\r\n            {\r\n                shouldShowToggle() && (\r\n                    <div className={styles.contextToggle} onClick={handleToggle}>\r\n                        <span className={styles.contextToggleIcon}></span>\r\n                    </div>\r\n                )\r\n            }\r\n            {\r\n                isContainer && (\r\n                    <ContextsContainer delegatedClass={styles.treeItemContext} container={context} noHighlight={true} />\r\n                )\r\n            }\r\n            {\r\n                !isContainer && (\r\n                    <Context delegatedClass={styles.treeItemContext} context={context} noHighlight={true} />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TreeItem;","module.exports[\"contextsTree\"] = \"_contextsTree_860f2f\";","import { h, Fragment } from 'preact';\r\nimport { useEffect, useState, useContext } from 'preact/hooks';\r\nimport { isValuableContainer } from '../../../scripts/utils/utils';\r\nimport { SettingsContext } from '../SettingsContext';\r\nimport TreeItem from '../TreeItem/TreeItem';\r\nimport Spinner from '../../../scripts/components/Spinner/Spinner';\r\n\r\nimport styles from \"./ContextsTree.scss\";\r\n\r\nconst ContextsTree = ({contexts, onSelectContext, ...props}) => {\r\n\r\n    let [contextsState, setContextsState] = useState([]);\r\n    let [selected, setSelected] = useState(null);\r\n    let { settings } = useContext(SettingsContext);\r\n\r\n    useEffect( () => {\r\n        let newState = contexts.map( (el, i) => {\r\n            return {\r\n                visible: false,\r\n                open: false,\r\n                depth: 0\r\n            }\r\n        });\r\n\r\n        newState.forEach( (state, i) => {\r\n            if (i == 0) return;\r\n\r\n            let previous = newState[i-1];\r\n            let previousContext = contexts[i-1];\r\n            let currentContext = contexts[i];\r\n            let depth = (previous) ? previous.depth : 0;\r\n\r\n            if (currentContext.parent == previousContext.parent) {\r\n                state.depth = previous.depth;\r\n                return;\r\n            }\r\n            if (currentContext.parent == previousContext) {\r\n                state.depth = depth + 1;\r\n                return;\r\n            }\r\n\r\n            parentIndex = contexts.findIndex( (c) => c == currentContext.parent );\r\n            state.depth = newState[parentIndex].depth + 1;\r\n        });\r\n\r\n        if (newState.length > 0) {\r\n            newState[0].visible = true;\r\n        }\r\n\r\n        setContextsState(newState);\r\n    }, contexts);\r\n\r\n    let openContext = (contextToOpen, index) => {\r\n        let newState = [...contextsState];\r\n\r\n        contexts.forEach( (context, i) => {\r\n            if (context.parent == contextToOpen) {\r\n                newState[i].visible = true;\r\n            }\r\n        });\r\n\r\n        newState[index].open = true;\r\n\r\n        setContextsState(newState);\r\n    }\r\n\r\n    let closeContext = (contextToClose, index) => {\r\n        let newState = [...contextsState];\r\n        let temp = [contextToClose];\r\n\r\n        contexts.forEach( (context, i) => {\r\n            if (temp.includes(context.parent)) {\r\n                temp.push(context);\r\n                newState[i].visible = false;\r\n                newState[i].open = false;\r\n            }\r\n        });\r\n\r\n        newState[index].open = false;\r\n\r\n        setContextsState(newState);\r\n    }\r\n\r\n    let selectContext = (context) => {\r\n        if (context.id == selected) return;\r\n\r\n        setSelected(context.id);\r\n        onSelectContext(context);\r\n    }\r\n\r\n    let shouldInsert = (context) => {\r\n        if (!context) return false;\r\n        if (context?.type == \"container\" && isValuableContainer(context)) return true;\r\n        return context?.type !== \"container\";\r\n    }\r\n\r\n    return (\r\n        <div className={styles.contextsTree} {...props} >\r\n            {\r\n                contextsState.map( (state, i) => (\r\n                    <>\r\n                        {\r\n                            shouldInsert(contexts[i]) && (\r\n                                <TreeItem\r\n                                    context={contexts[i]}\r\n                                    depth={state.depth}\r\n                                    isVisible={state.visible}\r\n                                    data-status={(state.open) ? \"open\" : \"closed\"}\r\n                                    data-selected={contexts[i].id == selected}\r\n                                    onToggle={\r\n                                        () => ( (state.open) ? closeContext(contexts[i], i) : openContext(contexts[i], i) )\r\n                                    }\r\n                                    onClick={\r\n                                        () => (selectContext(contexts[i]) , (!state.open && settings[\"contexts-click-to-expand\"]) ? openContext(contexts[i], i) : null )\r\n                                    }\r\n                                />\r\n                            )\r\n                        }\r\n                    </>\r\n                ))\r\n            }\r\n            {\r\n                contextsState.length == 0 && (\r\n                    <Spinner />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContextsTree;","module.exports[\"sidepane\"] = \"_sidepane_ba1669\";","module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')(\"4VUak\", \"2jKUE\")","import { h, Fragment } from 'preact';\r\nimport { useContext } from 'preact/hooks';\r\nimport { ConnectionContext } from '../ConnectionContext';\r\nimport { SettingsContext } from '../SettingsContext';\r\nimport Section from '../Section/Section';\r\nimport OrderedContextsList from '../OrderedContextsList/OrderedContextsList';\r\nimport SVG from '../SVG';\r\n\r\nimport styles from \"./Sidepane.scss\";\r\nimport WarningIcon from '../../../icons/warning.svg';\r\n\r\nconst Sidepane = ({context, ...props}) => {\r\n    \r\n    let { shouldUpdate } = useContext(ConnectionContext);\r\n    let { settings } = useContext(SettingsContext);\r\n\r\n    return (\r\n        <div className={styles.sidepane} {...props}>\r\n            <Section title=\"Info about the context\" id=\"context-info\">\r\n                {\r\n                    shouldUpdate && settings[\"dom-changed-warning\"] && (\r\n                        <>\r\n                            <div>\r\n                                <SVG src={WarningIcon} className=\"inline-icon\" />\r\n                                <span style={{marginLeft: '4px', color: 'hsl(57deg 100% 36%)'}}>There were some changes in the page. The stacking context informations might be out of date.</span>\r\n                            </div>\r\n                        </>\r\n                    )\r\n                }\r\n                {\r\n                    context && (context.passedChecks?.length > 0) && (\r\n                        <ul>\r\n                            {\r\n                                context.passedChecks.map((check) => (\r\n                                    <li>{check}</li>\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                    )\r\n                }\r\n                {\r\n                    context && (context.passedChecks?.length == 0) && \"This is just a container.\"\r\n                }\r\n            </Section>\r\n            <Section title=\"Children z-index order\" id=\"context-children\">\r\n                {\r\n                    context?.children?.length > 0 && (\r\n                        <OrderedContextsList contexts={context.children} />\r\n                    )\r\n                }\r\n            </Section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidepane;","module.exports[\"settingsContainer\"] = \"_settingsContainer_a0900f\";\nmodule.exports[\"setting\"] = \"_setting_a0900f\";","import { h } from 'preact';\r\nimport { useContext } from 'preact/hooks';\r\nimport { SettingsContext } from '../SettingsContext';\r\n\r\nimport styles from './PanelSettings.scss';\r\n\r\nconst PanelSettings = ({className=\"\", ...props}) => {\r\n    let settingsLabels = {\r\n        \"dom-changed-warning\": \"Show DOM changed warning\",\r\n        \"contexts-click-to-expand\": \"Expand context on click (tree view)\"\r\n    }\r\n\r\n    let { settings, saveSettings } = useContext(SettingsContext);\r\n\r\n    let checkboxClicked = (event) => {\r\n        let value = event.target.checked;\r\n        let settingName = event.target.name;\r\n        settings[settingName] = value;\r\n        saveSettings(settings);\r\n    }\r\n\r\n    return (\r\n        <div className={`${styles.settingsContainer} ${className}`} {...props}>\r\n            {\r\n                settings && Object.keys(settings).map((settingName) => (\r\n                    <div className={styles.setting}>\r\n                        <label>\r\n                            <input type=\"checkbox\" name={settingName} checked={settings[settingName]} onChange={checkboxClicked} />\r\n                            {settingsLabels[settingName]}\r\n                        </label>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PanelSettings;","module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')(\"4VUak\", \"4glIY\")","module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')(\"4VUak\", \"35qsn\")","module.exports[\"panelRoot\"] = \"_panelRoot_51d997\";\nmodule.exports[\"panelMenu\"] = \"_panelMenu_51d997\";\nmodule.exports[\"panelTree\"] = \"_panelTree_51d997\";\nmodule.exports[\"panelSidepane\"] = \"_panelSidepane_51d997\";\nmodule.exports[\"panelSettings\"] = \"_panelSettings_51d997\";\nmodule.exports[\"hidden\"] = \"_hidden_51d997\";","import { h, Fragment } from 'preact';\r\nimport { useContext, useEffect, useState } from 'preact/hooks';\r\nimport { DataContext } from '../DataContext';\r\nimport { ConnectionContext } from '../ConnectionContext';\r\nimport { SettingsContext } from '../SettingsContext';\r\nimport OptionBar from '../OptionBar/OptionBar';\r\nimport OptionBarButton from '../OptionBarButton/OptionBarButton';\r\nimport OptionBarLabel from '../OptionBarLabel/OptionBarLabel';\r\nimport OptionBarSpacer from '../OptionBarSpacer/OptionBarSpacer';\r\nimport ContextsTree from '../ContextsTree/ContextsTree';\r\nimport Sidepane from '../Sidepane/Sidepane';\r\nimport PanelSettings from '../PanelSettings/PanelSettings';\r\n\r\nimport RefreshIcon from '../../../icons/refresh.svg';\r\nimport WarningIcon from '../../../icons/warning.svg';\r\nimport SettingsIcon from '../../../icons/settings.svg';\r\nimport styles from \"./PanelContent.scss\";\r\n\r\nconst PanelContent = () => {\r\n\r\n    let { shouldUpdate } = useContext(ConnectionContext);\r\n    let { settings } = useContext(SettingsContext);\r\n    let {contexts, refreshContexts, cleanContexts} = useContext(DataContext);\r\n    let [selectedContext, setSelectedContext] = useState(null);\r\n    let [settingsOpen, setSettingsOpen] = useState(false);\r\n    \r\n    let analysePage = async () => {\r\n        setSelectedContext(null);\r\n        await refreshContexts();\r\n    }\r\n\r\n    let toggleSettings = () => {\r\n        setSettingsOpen(!settingsOpen);\r\n    }\r\n\r\n    useEffect( async () => {\r\n        await analysePage();\r\n\r\n        chrome.devtools.network.onNavigated.addListener(refreshContexts);\r\n\r\n        return () => {\r\n            chrome.devtools.network.onNavigated.removeListener(refreshContexts);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div id={styles.panelRoot}>\r\n            <OptionBar id={styles.panelMenu}>\r\n                <OptionBarButton icon={RefreshIcon} title=\"Re-analyse page\" onClick={() => analysePage()} />\r\n                { shouldUpdate && settings[\"dom-changed-warning\"] && (<OptionBarLabel icon={WarningIcon} text=\"There were changes in the page\" style={{color: '#b8ae00'}} />) }\r\n                <OptionBarSpacer />\r\n                <OptionBarButton icon={SettingsIcon} title=\"Open settings\" data-status={(settingsOpen) ? 'active' : ''} onClick={() => toggleSettings()} />\r\n            </OptionBar>\r\n            <PanelSettings className={(settingsOpen) ? \"\" : styles.hidden} id={styles.panelSettings} />\r\n            <ContextsTree id={styles.panelTree} contexts={contexts} onSelectContext={(context) => setSelectedContext(context)} />\r\n            <Sidepane id={styles.panelSidepane} context={selectedContext} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PanelContent;","import { h, render } from 'preact';\r\nimport DataContextProvider from '../../scripts/components/DataContext';\r\nimport ConnectionContextProvider from '../../scripts/components/ConnectionContext';\r\nimport PanelContent from '../../scripts/components/PanelContent/PanelContent';\r\n\r\nimport '../../global.scss';\r\nimport SettingsContextProvider from '../../scripts/components/SettingsContext';\r\n\r\nconst App = () => {\r\n\r\n    document.body.addEventListener(\"contextmenu\", (e) => e.preventDefault() );\r\n\r\n    return (\r\n        <ConnectionContextProvider scriptId=\"panel\" context=\"devtools\">\r\n            <SettingsContextProvider>\r\n                <DataContextProvider>\r\n                    <PanelContent />\r\n                </DataContextProvider>\r\n            </SettingsContextProvider>\r\n        </ConnectionContextProvider>\r\n    )\r\n}\r\n\r\nlet root = document.getElementById('root');\r\nroot.classList.add(\"theme-\" + chrome.devtools.panels.themeName);\r\n\r\nrender(<App />, root);"],"names":["parcelRequire","register","JSON","parse","$8dd7db207939a5e22318b0ec30fec1d6$export$9099ad97b570f7c","_param","props","$2lHoE","extends","objectSpread","style","flexGrow","$e7c069197045b1d1a7abc443b91145da$export$f11909f161f90f70","$e7c069197045b1d1a7abc443b91145da$export$50a0202ebee9fe50","$e7c069197045b1d1a7abc443b91145da$export$32fbda2d40d80994","$e7c069197045b1d1a7abc443b91145da$export$a9445500c06ec187","$4ce5c51b0334c24720bd9c532add6f62$export$9099ad97b570f7c","context","depth","isVisible","onToggle","objectWithoutProperties","getConnection","$22qVs","useContext","$53Rwj","ConnectionContext","tabId","chrome","devtools","inspectedWindow","isContainer","type","highlightContext","asyncToGenerator","conn","id","undoHighlightContext","className","$parcel$interopDefault","$e7c069197045b1d1a7abc443b91145da$exports","treeItem","paddingLeft","display","onMouseEnter","onMouseLeave","$2i27S","isValuableContainer","$5ff26","h","contextToggle","onClick","event","stopPropagation","contextToggleIcon","$6FktU","default","delegatedClass","treeItemContext","container","noHighlight","$6cfOm","$6b40c1f6f5982e04fc7ef810d77ab3d7$export$230fb42401efd33a","$f39c815bca5cead28e36b483d5cb66b2$export$9099ad97b570f7c","contexts","onSelectContext","ref","slicedToArray","useState","contextsState","setContextsState","ref1","selected","setSelected","settings","$25iKO","SettingsContext","useEffect","newState","map","el","i","visible","open","forEach","state","previous","previousContext","currentContext","parent","parentIndex","findIndex","c","length","openContext","contextToOpen","index","$6b40c1f6f5982e04fc7ef810d77ab3d7$exports","contextsTree","Fragment","contextToClose","temp","includes","push","closeContext","selectContext","$12pM5","$fb8252953e34d18bf0e7406f9076c0aa$export$dd9c0f682540afbb","$7a0cd7dbf1bc84e25cbe2a39b0ac27ec$exports","getBundleURL","$f10ff7cf67b1e9d0deb669cef4982a6c$export$9099ad97b570f7c","ref2","shouldUpdate","$fb8252953e34d18bf0e7406f9076c0aa$exports","sidepane","$4SiEV","title","$dxldM","src","marginLeft","color","passedChecks","check","children","$66F6B","$ea1cb382313a5ea46c4503203dbd9e04$export$2a1c5b7afe031a85","$ea1cb382313a5ea46c4503203dbd9e04$export$633215f9f0f4cefb","$1b7c47e0a2bc48ba0f2692f2a63f7878$export$9099ad97b570f7c","_className","settingsLabels","saveSettings","checkboxClicked","value","target","checked","settingName","name","$ea1cb382313a5ea46c4503203dbd9e04$exports","settingsContainer","Object","keys","setting","onChange","$e1b5c17168b548231ba71718410c639d$exports","$ec5ab0139b3243d4cb51d10621de1e09$exports","$baad0b36c4d932cadc34696e9d33b94f$export$5282a3f4c8e3c15d","$baad0b36c4d932cadc34696e9d33b94f$export$fb2dd882716728b4","$baad0b36c4d932cadc34696e9d33b94f$export$fb17c21c28fe837d","$baad0b36c4d932cadc34696e9d33b94f$export$87b6feb9c47be91","$baad0b36c4d932cadc34696e9d33b94f$export$3a46f62d3f34c8ae","$baad0b36c4d932cadc34696e9d33b94f$export$4b3c0a824be10116","$17f0b9d2ca8c0a52c87a153c64ca9da8$export$9099ad97b570f7c","$1VgzY","DataContext","refreshContexts","ref3","cleanContexts","selectedContext","setSelectedContext","ref4","settingsOpen","setSettingsOpen","analysePage","network","onNavigated","addListener","removeListener","$baad0b36c4d932cadc34696e9d33b94f$exports","panelRoot","$YCsHb","panelMenu","$19PAt","icon","$3wSoF","text","hidden","panelSettings","panelTree","panelSidepane","$603d5843bf5b79561f16e1629b715a69$var$App","document","body","addEventListener","e","preventDefault","scriptId","$603d5843bf5b79561f16e1629b715a69$var$root","getElementById","classList","add","panels","themeName","render"],"version":3,"file":"panel.76998a34.js.map"}